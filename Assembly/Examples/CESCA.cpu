#ifndef _RULEDEF
#define _RULEDEF
; Include ruledef file only once

#subruledef REG {
    R0 => 0b00
    R1 => 0b01
    R2 => 0b10
    R3 => 0b11
}

; The order of the bits is flipped because I made a mistake in the
; wiring and it's much easier to fix it this way.
#subruledef AluOpA {
    mov => 0b0000
    not => 0b1110
    sll => 0b0011
    srl => 0b1011
    sra => 0b0111
    rol => 0b1111
}
#subruledef AluOpAB {
    add  => 0b1000
    sub  => 0b0100
    addc => 0b1100
    subb => 0b0010
    and  => 0b1010
    or   => 0b0110
    xor  => 0b0001
    nand => 0b1001
    nor  => 0b0101
    xnor => 0b1101
}

#subruledef ADDR {
    skip({Off: i8})   =>  pc+Off+1  ; Skips a number of instructions
    {Imm: u8}   =>   Imm
}

#define _ALU_A(Op, Rd, Ra)          0x0 @ Rd`2 @ Ra`2 @ Op`4 @ 0x0
#define _ALU_AB(Op, Rd, Ra, Rb)     0x0 @ Rd`2 @ Ra`2 @ Op`4 @ 0b00 @ Rb`2
#define _ALU_ADDI(Rd, Ra, Imm)      0x1 @ Rd`2 @ Ra`2 @ Imm

#define _CMP_A(Op, Ra)              0x2 @ 0b00 @ Ra`2 @ Op`4 @ 0x0
#define _CMP_AB(Op, Ra, Rb)         0x2 @ 0b00 @ Ra`2 @ Op`4 @ 0b00 @ Rb`2
#define _CMP_IN(Imm)                0x2C @ Imm

#define _JUMP(Op, Addr)             Op`6 @ 0b00 @ Addr`8

#define _SWAP(Rd, Ra)               0x9 @ Rd`2 @ Ra`2 @ 0x00
#define _LCD_COM(Imm)               0xE0 @ Imm


#ruledef Instructions {
    ; ARITHMETIC AND LOGIC OPERATIONS
    
    {Op: AluOpA}  {Rd: REG}, {Ra: REG}              =>  _ALU_A(Op, Rd, Ra)
    {Op: AluOpAB} {Rd: REG}, {Ra: REG}, {Rb: REG}   =>  _ALU_AB(Op, Rd, Ra, Rb)
    
    add {Rd: REG}, {Ra: REG}, {Imm: i8}         =>  _ALU_ADDI(Rd, Ra, Imm)
    
    {Op: AluOpA}  NONE, {Ra: REG}               =>  _CMP_A(Op, Ra)
    {Op: AluOpAB} NONE, {Ra: REG}, {Rb: REG}    =>  _CMP_AB(Op, Ra, Rb)
    
    cmp {Ra: REG}, {Imm: i8}    =>  0x2 @ 0b01 @ Ra`2 @ Imm
    mask {Ra: REG}, {Imm: i8}   =>  0x2 @ 0b10 @ Ra`2 @ Imm
    mask IN, {Imm: i8}          =>  _CMP_IN(Imm)
    
    
    ; DATA MOVEMENT
    
    mov {Rd: REG}, {Imm: i8}        =>  0x3 @ Rd`2 @ 0b00 @ Imm
    
    mov {Rd: REG}, IN               =>  0x4 @ Rd`2 @ 0b00 @ 0x00
    mov IN, Ack                     =>  0x5000
    
    mov ({Addr: u8}), {Ra: REG}     =>  0x5 @ 0b01 @ Ra`2 @ Addr
    mov ({Rb: REG}), {Ra: REG}      =>  0x5 @ 0b10 @ Ra`2 @ 0b000000 @ Rb`2
    
    push {Ra: REG}                  =>  0x5 @ 0b11 @ Ra`2 @ 0x00
    
    mov {Rd: REG}, [{Addr: u8}]     =>  0x6 @ Rd`2 @ 0b00 @ Addr
    mov {Rd: REG}, ({Ra: REG})      =>  0x7 @ Rd`2 @ Ra`2 @ 0x00
    
    pop {Rd: REG}                   =>  0x8 @ Rd`2 @ 0b00 @ 0x00
    
    swap {Rd: REG}, {Ra: REG}       =>  _SWAP(Rd, Ra)
    
    
    ; JUMP INSTRUCTIONS
    
    j {Addr: ADDR}      =>  _JUMP(0b101000, Addr)
    jr {Ra: REG}        =>  0xA @ 0b01 @ Ra`2 @ 0x00
    
    call {Addr: ADDR}   =>  0xA8 @ Addr
    ret                 =>  0xAC00
    
    jz   {Addr: ADDR}   =>  _JUMP(0b101100, Addr)
    jnz  {Addr: ADDR}   =>  _JUMP(0b101101, Addr)
    jc   {Addr: ADDR}   =>  _JUMP(0b101110, Addr)
    jnc  {Addr: ADDR}   =>  _JUMP(0b101111, Addr)
    jv   {Addr: ADDR}   =>  _JUMP(0b110000, Addr)
    jnv  {Addr: ADDR}   =>  _JUMP(0b110001, Addr)
    jn   {Addr: ADDR}   =>  _JUMP(0b110010, Addr)
    jp   {Addr: ADDR}   =>  _JUMP(0b110011, Addr)
    jsp  {Addr: ADDR}   =>  _JUMP(0b110100, Addr)
    jleu {Addr: ADDR}   =>  _JUMP(0b110101, Addr)
    jlt  {Addr: ADDR}   =>  _JUMP(0b110110, Addr)
    jle  {Addr: ADDR}   =>  _JUMP(0b110111, Addr)
    
    
    ; OUTPUT AND MISC.
    
    mov LCDcmd, {Imm: i8}   =>  _LCD_COM(Imm)
    mov LCD, {Imm: i8}      =>  0xE4 @ Imm
    mov LCD, {Ra: REG}      =>  0xE @ 0b10 @ Ra`2 @ 0x00
    mov LCD, ({Addr: u8})   =>  0xEC @ Addr
    
    mov OUT, {Ra: REG}      =>  0xF @ 0b00 @ Ra`2 @ 0x00
    mov OUT, [{Addr: u8}]   =>  0xF4 @ Addr
    
    hlt                     =>  0xF800
    
    nop                     =>  0xFFFF
}

#ruledef Macros {
    test {Ra: REG}              =>  _CMP_A(0b0000, Ra)
    cmp  {Ra: REG}, {Rb: REG}   =>  _CMP_AB(0b0100, Ra, Rb)
    mask {Ra: REG}, {Rb: REG}   =>  _CMP_AB(0b1010, Ra, Rb)

    inc  {Ra: REG}              =>  _ALU_ADDI(Ra, Ra, 0x01)
    dec  {Ra: REG}              =>  _ALU_ADDI(Ra, Ra, 0xFF)
    sllc {Rd: REG}, {Ra: REG}   =>  _ALU_AB(0b1100, Rd, Ra, Ra)
    swap {Ra: REG}              =>  _SWAP(Ra, Ra)
    
    mov LCDcmd, Init            =>  _LCD_COM(0x38) @ _LCD_COM(0x0E) @ _LCD_COM(0x06)
    mov LCDcmd, Clr             =>  _LCD_COM(0x01)
    
    jeq  {Addr: ADDR}           =>  _JUMP(0b101100, Addr) ; JZ
    jne  {Addr: ADDR}           =>  _JUMP(0b101101, Addr) ; JNZ
    jltu {Addr: ADDR}           =>  _JUMP(0b101110, Addr) ; JC
    ; jnin {Addr: ADDR}           =>  _CMP_IN(0xFF) @ _JUMP(0b101100, Addr)
}

; CESCA MEMORY BANKS:
; Program memory: Banks 00 and 01 -> 512 bytes
#bankdef program {
    #bits 16
    #addr 0
    #size 0x100
    #outp 0
    #fill
}

; Data memory: Bank 10 -> 256 bytes
#bankdef data {
    #bits 8
    #addr 0
    #size 0x100
    #outp 0x100*16  ; Output location in bits
    #fill
}

; Stack: Bank 11 (cannot be programmed directly)

; End ruledef
#endif
