#ifndef _RULEDEF
#define _RULEDEF
; Include ruledef file only once

#subruledef REG {
    R0 => 0b00
    R1 => 0b01
    R2 => 0b10
    R3 => 0b11
}

; The order of the bits is flipped because I made a mistake in the
; wiring and it's much easier to fix it this way.
#subruledef AluOpA {
    MOV => 0b0000
    NOT => 0b1110
    SLL => 0b0011
    SRL => 0b1011
    SRA => 0b0111
    ROL => 0b1111
}
#subruledef AluOpAB {
    ADD  => 0b1000
    SUB  => 0b0100
    ADDC => 0b1100
    SUBB => 0b0010
    AND  => 0b1010
    OR   => 0b0110
    XOR  => 0b0001
    NAND => 0b1001
    NOR  => 0b0101
    XNOR => 0b1101
}

#subruledef ADDR {
    skip({Off: i8})   =>  pc+Off+1  ; Skips a number of instructions
    {Imm: u8}   =>   Imm
}

#define _ALU_A(Op, Rd, Ra)          0x0 @ Rd`2 @ Ra`2 @ Op`4 @ 0x0
#define _ALU_AB(Op, Rd, Ra, Rb)     0x0 @ Rd`2 @ Ra`2 @ Op`4 @ 0b00 @ Rb`2
#define _ALU_ADDI(Rd, Ra, Imm)      0x1 @ Rd`2 @ Ra`2 @ Imm

#define _CMP_A(Op, Ra)              0x2 @ 0b00 @ Ra`2 @ Op`4 @ 0x0
#define _CMP_AB(Op, Ra, Rb)         0x2 @ 0b00 @ Ra`2 @ Op`4 @ 0b00 @ Rb`2
#define _CMP_SUBI(Ra, Imm)          0x2 @ 0b01 @ Ra`2 @ Imm
#define _CMP_IN(Imm)                0x2C @ Imm

#define _JUMP(Op, Addr)             Op`6 @ 0b00 @ Addr`8

#define _SWAP(Rd, Ra)               0x9 @ Rd`2 @ Ra`2 @ 0x00
#define _LCD_COM(Imm)               0xE0 @ Imm


#ruledef Instructions {
    ; ARITHMETIC AND LOGIC OPERATIONS
    
    {Op: AluOpA}  {Rd: REG}, {Ra: REG}              =>  _ALU_A(Op, Rd, Ra)
    {Op: AluOpAB} {Rd: REG}, {Ra: REG}, {Rb: REG}   =>  _ALU_AB(Op, Rd, Ra, Rb)
    
    ADDI {Rd: REG}, {Ra: REG}, {Imm: i8}    =>  _ALU_ADDI(Rd, Ra, Imm)
    
    CMP-{Op: AluOpA}  {Ra: REG}             =>  _CMP_A(Op, Ra)
    CMP-{Op: AluOpAB} {Ra: REG}, {Rb: REG}  =>  _CMP_AB(Op, Ra, Rb)
    
    CMP-SUBI {Ra: REG}, {Imm: i8}   =>  _CMP_SUBI(Ra, Imm)
    CMP-ANDI {Ra: REG}, {Imm: i8}   =>  0x2 @ 0b10 @ Ra`2 @ Imm
    
    CMP-IN {Imm: i8}                =>  _CMP_IN(Imm)
    
    
    ; DATA MOVEMENT
    
    MOVI {Rd: REG}, {Imm: i8}       =>  0x3 @ Rd`2 @ 0b00 @ Imm
    
    IN {Rd: REG}                    =>  0x4 @ Rd`2 @ 0b00 @ 0x00
    
    IN-Ack                          =>  0x5000
    
    ST-Addr {Ra: REG}, {Addr: u8}   =>  0x5 @ 0b01 @ Ra`2 @ Addr
    
    ST-Reg {Ra: REG}, {Rb: REG}     =>  0x5 @ 0b10 @ Ra`2 @ 0b000000 @ Rb`2
    
    PUSH {Ra: REG}                  =>  0x5 @ 0b11 @ Ra`2 @ 0x00
    
    LD-Addr {Rd: REG}, {Addr: u8}   =>  0x6 @ Rd`2 @ 0b00 @ Addr
    
    LD-Reg {Rd: REG}, {Ra: REG}     =>  0x7 @ Rd`2 @ Ra`2 @ 0x00
    
    POP {Rd: REG}                   =>  0x8 @ Rd`2 @ 0b00 @ 0x00
    
    SWAP {Rd: REG}, {Ra: REG}       =>  _SWAP(Rd, Ra)
    
    
    ; JUMP INSTRUCTIONS
    
    J {Addr: ADDR}          =>  _JUMP(0b101000, Addr)
    JR {Ra: REG}            =>  0xA @ 0b01 @ Ra`2 @ 0x00
    
    CALL {Addr: ADDR}       =>  0xA8 @ Addr
    RET                     =>  0xAC00
    
    JZ {Addr: ADDR}         =>  _JUMP(0b101100, Addr)
    JNZ {Addr: ADDR}        =>  _JUMP(0b101101, Addr)
    JC {Addr: ADDR}         =>  _JUMP(0b101110, Addr)
    JNC {Addr: ADDR}        =>  _JUMP(0b101111, Addr)
    JV {Addr: ADDR}         =>  _JUMP(0b110000, Addr)
    JNV {Addr: ADDR}        =>  _JUMP(0b110001, Addr)
    JN {Addr: ADDR}         =>  _JUMP(0b110010, Addr)
    JP {Addr: ADDR}         =>  _JUMP(0b110011, Addr)
    JSP {Addr: ADDR}        =>  _JUMP(0b110100, Addr)
    JLEU {Addr: ADDR}       =>  _JUMP(0b110101, Addr)
    JLT {Addr: ADDR}        =>  _JUMP(0b110110, Addr)
    JLE {Addr: ADDR}        =>  _JUMP(0b110111, Addr)
    
    
    ; OUTPUT AND MISC.
    
    LCD-Com {Imm: i8}       =>  _LCD_COM(Imm)
    LCD-Imm {Imm: i8}       =>  0xE4 @ Imm
    LCD-Reg {Ra: REG}       =>  0xE @ 0b10 @ Ra`2 @ 0x00
    LCD-Addr {Addr: u8}     =>  0xEC @ Addr
    
    OUT-Reg {Ra: REG}       =>  0xF @ 0b00 @ Ra`2 @ 0x00
    OUT-Addr {Addr: u8}     =>  0xF4 @ Addr
    
    HLT                     =>  0xF800
    
    NOP                     =>  0xFFFF
}

#ruledef Macros {
    TEST {Ra: REG}              =>  _CMP_A(0b0000, Ra)
    CMP {Ra: REG}, {Rb: REG}    =>  _CMP_AB(0b0100, Ra, Rb)
    CMP {Ra: REG}, {Imm: i8}    =>  _CMP_SUBI(Ra, Imm)

    INC  {Ra: REG}              =>  _ALU_ADDI(Ra, Ra, 0x01)
    DEC  {Ra: REG}              =>  _ALU_ADDI(Ra, Ra, 0xFF)
    SLLC {Rd: REG}, {Ra: REG}   =>  _ALU_AB(0b1100, Rd, Ra, Ra)
    SWAP {Ra: REG}              =>  _SWAP(Ra, Ra)
    
    LCD-Init                    =>  _LCD_COM(0x38) @ _LCD_COM(0x0E) @ _LCD_COM(0x06)
    LCD-Clr                     =>  _LCD_COM(0x01)
    
    JEQ  {Addr: ADDR}           =>  _JUMP(0b101100, Addr) ; JZ
    JNE  {Addr: ADDR}           =>  _JUMP(0b101101, Addr) ; JNZ
    JLTU {Addr: ADDR}           =>  _JUMP(0b101110, Addr) ; JC
    JNIN {Addr: ADDR}           =>  _CMP_IN(0xFF) @ _JUMP(0b101100, Addr)
}

; CESCA MEMORY BANKS:
; Program memory: Banks 00 and 01 -> 512 bytes
#bankdef program {
    #bits 16
    #addr 0
    #size 0x100
    #outp 0
    #fill
}

; Data memory: Bank 10 -> 256 bytes
#bankdef data {
    #bits 8
    #addr 0
    #size 0x100
    #outp 0x100*16   ; Output location in bits
    #fill
}

; Stack: Bank 11 (cannot be programmed directly)

; End ruledef
#endif
